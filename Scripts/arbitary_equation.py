# -*- coding: utf-8 -*-
"""Copy of Arbitary_equation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zsTupE18YMAAxEqJFoYiN1ST39UaaEbq
"""

!pip install rdkit
!pip install numpy
!pip install pandas

import pandas as pd
df = pd.read_csv('c1toc50_c1toc50.csv')
df

"""#Comparing known and unknown molecules"""

import pandas as pd
from rdkit import Chem

# Load the CSV files
file1 = "New_data.csv"  # Path to the first CSV file
file2 = "GDB13_28_withidx.csv"  # Path to the second CSV file
output_known = "common_molecules.csv"  # File to save common SMILES
output_unknown = "not_common_molecules.csv"  # File to save unknown SMILES

# Column containing SMILES
smiles_column = "smiles"  # Update this if the SMILES column name differs

# Function to canonicalize SMILES
def canonicalize_smiles(smile):
    try:
        mol = Chem.MolFromSmiles(smile)
        if mol is not None:
            return Chem.MolToSmiles(mol, canonical=True)
    except Exception as e:
        print(f"Error processing SMILES: {smile}, {e}")
    return None

# Load and canonicalize SMILES in both files
df1 = pd.read_csv(file1)
df2 = pd.read_csv(file2)

df1[smiles_column] = df1[smiles_column].apply(canonicalize_smiles)
df2[smiles_column] = df2[smiles_column].apply(canonicalize_smiles)

# Drop invalid SMILES
df1 = df1.dropna(subset=[smiles_column])
df2 = df2.dropna(subset=[smiles_column])

# Find common and unknown SMILES
common_smiles = df2[df2[smiles_column].isin(df1[smiles_column])]
unknown_smiles = df2[~df2[smiles_column].isin(df1[smiles_column])]

# Save the results
common_smiles.to_csv(output_known, index=False)
unknown_smiles.to_csv(output_unknown, index=False)

print(f"Common molecules saved to {output_known}")
print(f"Unknown molecules saved to {output_unknown}")

"""#Linear Regression"""

experimental_values = df['homolumogap']  # Replace with your experimental column name
calculated_values = df['Predicted_esm']  # Replace with your calculated column name

from sklearn.linear_model import LinearRegression
model = LinearRegression()
# Reshape calculated_values to a 2D array for sklearn
calculated_values = calculated_values.values.reshape(-1, 1)

model.fit(calculated_values, experimental_values)

slope = model.coef_[0]
intercept = model.intercept_
print(f"Equation: y = {slope:.4f}x + {intercept:.4f}")

#save the equation in a csv file
import csv
with open('equation1.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['Equation', 'y = {:.4f}x + {:.4f}'.format(slope, intercept)])

from sklearn.metrics import r2_score, mean_squared_error
from sklearn.metrics import mean_absolute_error
predictions = model.predict(calculated_values)
r2 = r2_score(experimental_values, predictions)
mse = mean_squared_error(experimental_values, predictions)
mae = mean_absolute_error(experimental_values, predictions)
print(f"R-squared: {r2:.4f}")
print(f"Mean Squared Error: {mse:.4f}")
print(f"Mean Absolute Error: {mae:.4f}")

#Print experimental_values vs the predicted values
print("Experimental Values:")
print(experimental_values)
print("\nPredicted Values:")
print(predictions)

#save csv of experimental value and predicted values
import pandas as pd
df = pd.DataFrame({'Experimental Values': experimental_values, 'Predicted Values': predictions})
df.to_csv('Experimental_vs_predicted.csv', index=False)

"""# C, N, O, S counts"""

import pandas as pd
from rdkit import Chem

def count_atoms_and_bonds(smiles):
    """Count C, N, O, S, halogens, and pi-bonds in a molecule."""
    mol = Chem.MolFromSmiles(smiles)
    if not mol:
        return [None] * 7  # Return None for invalid SMILES

    atom_counts = {"C": 0, "N": 0, "O": 0, "S": 0, "X": 0}  # Halogens grouped under "X"
    pi_bonds = 0

    for atom in mol.GetAtoms():
        symbol = atom.GetSymbol()
        if symbol in atom_counts:
            atom_counts[symbol] += 1
        elif symbol in {"F", "Cl", "Br", "I"}:  # Halogens
            atom_counts["X"] += 1

    for bond in mol.GetBonds():
        bond_type = bond.GetBondType()
        if bond_type in {Chem.BondType.DOUBLE, Chem.BondType.TRIPLE, Chem.BondType.AROMATIC}:
            pi_bonds += 1

    return [
        atom_counts["C"],
        atom_counts["N"],
        atom_counts["O"],
        atom_counts["S"],
        atom_counts["X"],
        pi_bonds
    ]

# Load your original CSV file
input_csv = "c1_50_unknown_molecules.csv"  # Replace with the path to your file
output_csv = "c1_50_unknown_molecules_counts.csv"  # Replace with the path to save the output file
data = pd.read_csv(input_csv)

# Process each SMILES string
columns = ["C_count", "N_count", "O_count", "S_count", "X_count", "pi_bonds"]
data[columns] = data["smiles"].apply(count_atoms_and_bonds).apply(pd.Series)

# Save the updated CSV file
data.to_csv(output_csv, index=False)

print(f"Updated CSV file saved to: {output_csv}")

import pandas as pd
input_csv = "Polyacetylene_pyrrole_thiophene_data.csv"  # Replace with your file path
data = pd.read_csv(input_csv)
data

import pandas as pd
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load the CSV file
file_path = "known_molecules_elements_counts.csv"  # Replace with the path to your CSV file
df = pd.read_csv(file_path)

# Replace 'actual_column_name' and 'predicted_column_name' with your column names
actual = df['homolumogap_exp']
predicted = df['Predicted_Hatree3']

# Calculate metrics
mae = mean_absolute_error(actual, predicted)
mse = mean_squared_error(actual, predicted)
r2 = r2_score(actual, predicted)

# Print the results
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"RÂ² Score: {r2}")

"""#Regression with Carbon molecules"""

import pandas as pd
from sklearn.linear_model import LinearRegression

# Load the CSV file
input_csv = "c1toc50_428_gap_smalltolarge.csv"  # Replace with your file path
data = pd.read_csv(input_csv)

# Define features (X) and target (y)
#features = ["C_count", "N_count", "O_count", "S_count", "X_count", "pi_bonds", "Predicted_esm"]
features = ["C_count", "Predicted_esm"]
target = "homolumogap"
X = data[features]
y = data[target]

# Train a linear regression model
model = LinearRegression()
model.fit(X, y)

# Get the coefficients and intercept
coefficients = model.coef_
intercept = model.intercept_

# Print the regression equation
equation = " + ".join([f"{coeff:.4f}*{feature}" for coeff, feature in zip(coefficients, features)])
equation = f"y = {intercept:.4f} + {equation}"
print("Regression Equation:")
print(equation)

# Add predicted values to the original DataFrame
data["Predicted Experimental homolumo"] = model.predict(X)

# Save the updated DataFrame
output_csv = "c1toc50_428_gap_smalltolarge_results.csv"  # Replace with your desired file path
data.to_csv(output_csv, index=False)
print(f"Updated CSV file with predictions saved to: {output_csv}")

from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

r2 = model.score(X, y)
print(f"R-squared: {r2:.4f}")
mae=mean_absolute_error(y, model.predict(X))
print(f"Mean Absolute Error: {mae:.4f}")
mse=mean_squared_error(y, model.predict(X))
print(f"Mean Squared Error: {mse:.4f}")